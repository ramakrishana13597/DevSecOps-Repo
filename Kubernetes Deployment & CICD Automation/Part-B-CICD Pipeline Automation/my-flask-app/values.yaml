# Default values for my-flask-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2  # Increased replicas for availability

image:
  repository: your-dockerhub-username/flask-app  # Update this with your Docker image
  pullPolicy: IfNotPresent
  tag: latest  # Set latest or dynamic tag during deployment

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 5000  # Flask app runs on port 5000

ingress:
  enabled: true  # Enable ingress for external access
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Use Cert-Manager for TLS
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: flask-app.local  # Change to your domain
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: flask-app-tls
      hosts:
        - flask-app.local

resources:
  requests:
    cpu: "250m"
    memory: "128Mi"
  limits:
    cpu: "500m"
    memory: "256Mi"

livenessProbe:
  httpGet:
    path: /health
    port: 5000  # Ensure this matches the Flask app's health check route
  initialDelaySeconds: 5
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /health
    port: 5000
  initialDelaySeconds: 5
  periodSeconds: 10

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 70

volumes: []
volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

